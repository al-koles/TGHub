@using TGHub.Application.Resources
@using TGHub.Blazor.Resources
@using TGHub.Blazor.Shared.Buttons
@using TGHub.Blazor.Shared.Components
@using TGHub.Blazor.Shared.Components.CustomSelect
@using TGHub.Application.Common
@using TGHub.Application.Common.Filtering
@using TGHub.Application.Common.SessionStorage
@using TGHub.Application.Services.Base
@using TGHub.Application.Services.Channels
@using TGHub.Domain.Entities
@using TGHub.Telegram.Bot
@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject LocalStorageProvider LocalStorageProvider
@inject SessionStorageProvider SessionStorageProvider
@inject IService<ChannelAdministrator> ChannelAdministratorService
@inject ITgHubTelegramBotClient TgHubTelegramBotClient
@inject ILogger<NavMenu> Logger
@inject IWebHostEnvironment WebHostEnvironment

<nav class="bg-[@ColorStrings.C3]/40 shadow-md">
    <div class="flex justify-between max-w-7xl mx-auto px-4">
        <div class="flex">
            <a href="/" class="flex items-center py-1 px-2 bg-[@ColorStrings.C1]">
                <img class="h-10 w-auto mr-2" src="/icons/logo_icon_and_name.png" alt="Logo">
            </a>
            <ul class="flex flex-wrap items-center ml-4 space-x-4">
                <li>
                    <a href="/" class="text-gray-600 hover:text-gray-800">
                        @UiStringsLoc[nameof(UiStrings.NavDashboard)]
                    </a>
                </li>
                <li>
                    <a href="/lottery" class="text-gray-600 hover:text-gray-800">
                        @UiStringsLoc[nameof(UiStrings.NavLottery)]
                    </a>
                </li>
                <li>
                    <a href="/comments" class="text-gray-600 hover:text-gray-800">
                        @UiStringsLoc[nameof(UiStrings.NavComments)]
                    </a>
                </li>
                <li>
                    <a href="/messages" class="text-gray-600 hover:text-gray-800">
                        @UiStringsLoc[nameof(UiStrings.NavMessages)]
                    </a>
                </li>
            </ul>
            <CustomSelect @bind-Value="@_selectedChannel" Items="@_administratedChannels"/>
        </div>
        <div class="flex flex-wrap items-center gap-10">
            <div class="flex items-center">
                <CultureSelector/>
            </div>
            <div class="flex flex-wrap items-center">
                <a href="/profile" class="text-gray-600 hover:text-gray-800 mr-4">Profile</a>
                <LogoutButton/>
            </div>
        </div>
    </div>
</nav>

@code {

    private List<CustomSelectModel<int>> _administratedChannels = new();
    private CustomSelectModel<int>? _selectedChannel;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var administratedChannels = await ChannelAdministratorService
                .ListAsync(new FilterBase<ChannelAdministrator>
                {
                    Where = a => a.IsActive && a.AdministratorId == LocalStorageProvider.Id
                });
            foreach (var channel in administratedChannels)
            {
                var selectModel = new CustomSelectModel<int>
                {
                    Id = channel.ChannelId,
                    Name = channel.Channel.Name,
                    PhotoUrl = channel.Channel.PhotoUrl
                };
                _administratedChannels.Add(selectModel);
            }
        }
    }

}