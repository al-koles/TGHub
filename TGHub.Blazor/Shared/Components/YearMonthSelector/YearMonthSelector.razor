@using TGHub.Domain.Enums
@using TGHub.Blazor.Resources
@using System.Globalization
<div class="flex gap-2 items-center">
    <div class="text-[@ColorStrings.C3]/80 hover:text-[@ColorStrings.C3] cursor-pointer"
         @onclick="@OnLeftClick">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
             class="w-8">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"/>
        </svg>
    </div>
    <div class="py-1 px-2 bg-white rounded-full focus:outline-[@ColorStrings.C5]">
        <div class="relative flex gap-2">
            @(new DateTime(Value.Year, (int)Value.Month, 1).ToString(CultureInfo.CurrentCulture.DateTimeFormat.YearMonthPattern))
            <div class="text-[@ColorStrings.C4]">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                     class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z"/>
                </svg>
            </div>
            <input type="month" value="@GetValue()" @onchange="@OnMonthChanged"
                   class="opacity-0 absolute top-0 left-0 w-full h-full"/>
        </div>
    </div>
    <div class="text-[@ColorStrings.C3]/80 hover:text-[@ColorStrings.C3] cursor-pointer"
         @onclick="@OnRightClick">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
             class="w-8">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"/>
        </svg>
    </div>
</div>

@code {

    [Parameter]
    public YearMonthSelectorModel Value { get; set; } = new();

    [Parameter]
    public EventCallback<YearMonthSelectorModel> ValueChanged { get; set; }

    private async Task OnMonthChanged(ChangeEventArgs args)
    {
        if (TryParse(args.Value?.ToString() ?? "", out var year, out var month))
        {
            Value = new YearMonthSelectorModel
            {
                Year = year,
                Month = month
            };
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private string GetValue()
    {
        var month = ((int)Value.Month).ToString();
        if (month.Length == 1)
        {
            month = "0" + month;
        }
        var res = $"{Value.Year}-{month}";
        return res;
    }

    private bool TryParse(string str, out int year, out Month month)
    {
        var parts = str.Split('-');
        if (parts.Length != 2)
        {
            year = Value.Year;
            month = Value.Month;
            return false;
        }
        var yearParsed = int.TryParse(parts[0], out year);
        var monthParsed = Enum.TryParse(parts[1], out month);
        return yearParsed && monthParsed;
    }

    private async Task OnLeftClick()
    {
        var month = Value.Month;
        var year = Value.Year;
        if (month == Month.January)
        {
            year--;
        }
        month = (int)month > 1 ? month - 1 : Month.December;

        Value = new YearMonthSelectorModel
        {
            Year = year,
            Month = month
        };
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task OnRightClick()
    {
        var month = Value.Month;
        var year = Value.Year;
        if (month == Month.December)
        {
            year++;
        }
        month = (int)month < 12 ? month + 1 : Month.January;

        Value = new YearMonthSelectorModel
        {
            Year = year,
            Month = month
        };
        await ValueChanged.InvokeAsync(Value);
    }

}