@using System.Linq.Expressions
@using TGHub.Blazor.Resources
<div class="relative min-h-[7rem] max-h-[10rem] rounded-xl bg-white py-1 pl-1 pr-2
            outline-1 @(_isValid == null ? "" : _isValid.Value ? $"outline outline-[{ColorStrings.C5}]" : "outline outline-red-500")">
    <div class="flex flex-wrap gap-2 max-h-[9.5rem] overflow-y-auto py-2 pl-2 pr-1"
         @ondragover="@OnFileDragStart">
        @foreach (var file in Files)
        {
            <CustomInputFilesItem File="@file" FileDeleteClick="@Remove"/>
        }
        <div class="relative w-[6rem] h-[6rem]
                        border-4 border-slate-400/70 hover:border-slate-400 border-dashed rounded-xl 
                        flex items-center justify-center
                        text-slate-400/70 hover:text-slate-400">
            <div class="text-2xl">+</div>
            <InputFile OnChange="@OnChange"
                       class="opacity-0 absolute w-full h-full top-0 left-0 hover:cursor-pointer"/>
        </div>
    </div>
    @if (_isInputVisible || !Files.Any())
    {
        <div class="absolute top-0 left-0 w-full h-full 
                    @(_isValid == null ? "border-slate-400/70" : _isValid.Value ? $"border-[{ColorStrings.C5}]" : "border-red-500") border-4 border-dashed rounded-xl 
                    flex items-center justify-center bg-white
                    text-slate-400/70 hover:text-slate-400">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                 class="w-10 h-10">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 00-2.25 2.25v9a2.25 2.25 0 002.25 2.25h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25H15m0-3l-3-3m0 0l-3 3m3-3V15"/>
            </svg>
            <InputFile OnChange="@OnChange"
                       multiple
                       @ondragleave="@OnFileDragEnd"
                       class="opacity-0 absolute w-full h-full top-0 left-0 hover:cursor-pointer"/>
        </div>
    }
</div>

@code {

    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    [Parameter]
    public List<IBrowserFile> Files { get; set; } = new();

    [Parameter]
    public EventCallback<List<IBrowserFile>> FilesChanged { get; set; }

    [Parameter]
    public Expression<Func<List<IBrowserFile>>>? FilesExpression { get; set; }

    private bool? _isValid;
    private bool _isInputVisible;
    private FieldIdentifier _fieldIdentifier;

    protected override void OnInitialized()
    {
        if (FilesExpression == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a value for the 'FilesExpression' " +
                                                "parameter. Normally this is provided automatically when using '@bind-Value'.");
        }

        _fieldIdentifier = FieldIdentifier.Create(FilesExpression);

        if (EditContext != null)
        {
            EditContext.OnValidationStateChanged += OnValidationStateChanged;
        }
    }

    private void OnValidationStateChanged(object? sender, ValidationStateChangedEventArgs args)
    {
        if (EditContext == null)
        {
            return;
        }

        _isValid = !EditContext.GetValidationMessages(_fieldIdentifier).Any();
        StateHasChanged();
    }

    private void OnChange(InputFileChangeEventArgs args)
    {
        var files = Files.Concat(args.GetMultipleFiles().Where(inputFile => Files.All(f => f.Name != inputFile.Name)));
        Files = new List<IBrowserFile>();
        Files.AddRange(files);
        _isInputVisible = false;
        FilesChanged.InvokeAsync(Files);
        EditContext?.NotifyFieldChanged(_fieldIdentifier);
    }

    private void OnFileDragStart()
    {
        _isInputVisible = true;
    }

    private void OnFileDragEnd()
    {
        _isInputVisible = false;
    }

    private void Remove(IBrowserFile file)
    {
        Files.Remove(file);
        FilesChanged.InvokeAsync(Files);
        EditContext?.NotifyFieldChanged(_fieldIdentifier);
    }

}