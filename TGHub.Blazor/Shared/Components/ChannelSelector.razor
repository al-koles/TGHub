@using TGHub.Blazor.Resources
@using TGHub.Domain.Entities
@using TGHub.Application.Common.Filtering
@using TGHub.Application.Common
@using TGHub.Application.Common.SessionStorage
@using TGHub.Application.Resources
@using TGHub.Application.Services.Base

@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject LocalStorageProvider LocalStorageProvider
@inject SessionStorageProvider SessionStorageProvider
@inject IService<ChannelAdministrator> ChannelAdministratorService

<div class="p-0.5 rounded-md bg-[@ColorStrings.C4]">
    <BlazoredTypeahead SearchMethod="@SearchChannelAdministrators"
                       TValue="@ChannelAdministrator"
                       TItem="@ChannelAdministrator"
                       Value="@_selectedChannel"
                       ValueExpression="@(() => _selectedChannel)"
                       ValueChanged="@OnValueChanged"
                       MaximumSuggestions="@_administratedChannels.Count"
                       EnableDropDown="@true"
                       ShowDropDownOnFocus="@true"
                       placeholder="@UiStringsLoc[nameof(UiStrings.SelectChannel)]">
        <SelectedTemplate>
            <div class="flex gap-2 items-center">
                <img class="h-6 w-6 rounded-full" 
                     src="@context.Channel.PhotoUrl" 
                     alt="@(context.Channel.Name.First())">
                @(context.Channel.Name)
            </div>
        </SelectedTemplate>
        <HelpTemplate>
            help
        </HelpTemplate>
        <ResultTemplate>
            <div class="flex gap-2 items-center">
                <img class="h-6 w-6 rounded-full" 
                     src="@context.Channel.PhotoUrl" 
                     alt="@(context.Channel.Name.First())">
                @(context.Channel.Name)
            </div>
        </ResultTemplate>
    </BlazoredTypeahead>
</div>

@code {
    
    private IList<ChannelAdministrator> _administratedChannels = new List<ChannelAdministrator>();
    private ChannelAdministrator? _selectedChannel;
    
    protected override async Task OnInitializedAsync()
    {
        var administratedChannels = await ChannelAdministratorService
            .ListAsync(new FilterBase<ChannelAdministrator>
            {
                Where = a => a.IsActive && a.Channel.IsActive && a.AdministratorId == LocalStorageProvider.Id
            });
        _administratedChannels = administratedChannels;

        if (SessionStorageProvider.SelectedChannelAdministratorData != null)
        {
            _selectedChannel = _administratedChannels
                .FirstOrDefault(a => a.ChannelId == SessionStorageProvider.SelectedChannelAdministratorData.ChannelId);
        }
    }

    private async Task<IEnumerable<ChannelAdministrator>> SearchChannelAdministrators(string searchText)
    {
        return await Task.FromResult(_administratedChannels
            .Where(a => a.Channel.Name.ToLower().Contains(searchText.ToLower().Trim())).ToList());
    }

    private async Task OnValueChanged(ChannelAdministrator? selectedChannel)
    {
        _selectedChannel = selectedChannel;
        if (_selectedChannel == null)
        {
            SessionStorageProvider.SelectedChannelAdministratorData = null;
        }
        else
        {
            SessionStorageProvider.SelectedChannelAdministratorData = new ChannelAdministratorSessionData
            {
                ChannelId = _selectedChannel.ChannelId,
                Role = _selectedChannel.Role
            };
        }
        await SessionStorageProvider.PushAsync();
    }
    
}