@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Localization
@using TGHub.Application.Resources
@using TGHub.Blazor.Resources
@namespace TGHub.Blazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@inject IStringLocalizer<UiStrings> UiStringsLoc

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="~/"/>
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css"/>
    <link href="css/site.css" rel="stylesheet"/>
    <link href="TGHub.Blazor.styles.css" rel="stylesheet"/>
    <link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />
    <script src="_content/BlazorDateRangePicker/clickAndPositionHandler.js"></script>
    <link rel="stylesheet" href="_content/BlazorDateRangePicker/daterangepicker.min.css" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/>
    <link rel="icon" type="image/png" href="icons/favicon.png"/>
</head>
<body class="bg-[@ColorStrings.C0]">
@RenderBody()

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        @UiStringsLoc[UiStrings.ExceptionProd]
    </environment>
    <environment include="Development">
        @UiStringsLoc[UiStrings.ExceptionDev]
    </environment>
    <a href="" class="reload">@UiStringsLoc[UiStrings.Reload]</a>
    <a class="dismiss">🗙</a>
</div>

<script src="_framework/blazor.server.js" autostart="false"></script>
<script src="https://cdn.tailwindcss.com"></script>
<script src="https://kit.fontawesome.com/f211c7207d.js" crossorigin="anonymous"></script>
<script src="_content/Blazored.Typeahead/blazored-typeahead.js"></script>

<script>

  Blazor.start({
    reconnectionOptions: {
      maxRetries: 20,
      retryIntervalMilliseconds: 2000
    }
  });
  
    // Wait until a 'reload' button appears
    new MutationObserver((mutations, observer) => {
        if (document.querySelector('#components-reconnect-modal h5 a')) {
            // Now every 10 seconds, see if the server appears to be back, and if so, reload
            async function attemptReload() {
                await fetch(''); // Check the server really is back
                location.reload();
            }
            observer.disconnect();
            attemptReload();
            setInterval(attemptReload, 10000);
        }
    }).observe(document.body, { childList: true, subtree: true });
    
    function addPostTelegramWidjedToElement(elemntId){
        let container = document.getElementById(elemntId);
        
        let scriptElement = document.createElement('script');
        scriptElement.async = true;
        scriptElement.src = 'https://telegram.org/js/telegram-widget.js?22';
        scriptElement.setAttribute('data-telegram-post', 'bromeeems/23446');
        scriptElement.setAttribute('data-width', '100%');
        
        container.appendChild(scriptElement);

    }
        
      function getClientTimeZoneOffset() {
        let datetime = new Date();
        return datetime.getTimezoneOffset() / -60;
      }
</script>

</body>
</html>