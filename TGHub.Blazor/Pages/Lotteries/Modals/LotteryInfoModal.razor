@using TGHub.Application.Resources
@using TGHub.Application.Services.Lotteries.Interfaces
@using TGHub.Blazor.Pages.Lotteries.Components
@using TGHub.Blazor.Resources
@using TGHub.Domain.Entities
@using TGHub.Domain.Enums
@using TGHub.Application.Common
@using TGHub.Application.Interfaces
@using AutoMapper
@using System.Globalization
@using TGHub.Application
@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject IStringLocalizer<NotificationStrings> NotificationStringsLoc
@inject LocalStorageProvider LocalStorageProvider
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject ILogger<LotteryInfoModal> Logger
@inject IMapper Mapper

@if (_userHasEditRights)
{
    <div class="flex justify-content-end mb-3">
        <div class="flex flex-wrap gap-3 p-1 rounded-full bg-[@ColorStrings.C0] w-fit relative">
            <a class="text-[@ColorStrings.C2]/80 hover:text-[@ColorStrings.C2]"
               title="@UiStringsLoc[UiStrings.Edit]"
               href="/lotteries/edit/@LotteryInfo.Id?redirectUrl=@Uri.EscapeDataString(new Uri(NavigationManager.Uri).PathAndQuery)">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                     class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"/>
                </svg>
            </a>
            <div class="text-red-500 hover:text-red-600 hover:cursor-pointer"
                 title="@UiStringsLoc[UiStrings.Delete]"
                 @onclick="@DeleteAsync">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                     class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"/>
                </svg>
            </div>
        </div>
    </div>
}

<div class="w-full grid gap-2"
     style="grid-template-columns: repeat(auto-fill, minmax(20rem, 1fr))">
    <div class="bg-[@ColorStrings.C0] rounded-xl p-2">
        <div class="flex flex-wrap items-center justify-between gap-2">
            <div>
                <div class="font-bold text-lg inline">
                    @UiStringsLoc[UiStrings.Lottery]
                </div>
                <div class="inline">
                    <LotteryStatus LotteryInfo="@LotteryInfo" IsResult="@false"/>
                </div>
            </div>
            @if (_userHasEditRights)
            {
                <div class="p-1 rounded-full bg-white">
                    @if (_isSendingLottery)
                    {
                        <ElementLoader/>
                    }
                    <button class="text-[#24a1de] block
                                @(IsLotterySent ? "opacity-50" : "hover:text-[#2193cc]")"
                            title="@(IsLotterySent ? UiStringsLoc[UiStrings.LotteryIsSent] : UiStringsLoc[UiStrings.SendNow])"
                            disabled="@IsLotterySent"
                            type="button"
                            @onclick="@SendLotteryAsync">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 496 512"
                             class="w-6 h-6">
                            <!--! Font Awesome Pro 6.4.0 by @@fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                            <path d="M248,8C111.033,8,0,119.033,0,256S111.033,504,248,504,496,392.967,496,256,384.967,8,248,8ZM362.952,176.66c-3.732,39.215-19.881,134.378-28.1,178.3-3.476,18.584-10.322,24.816-16.948,25.425-14.4,1.326-25.338-9.517-39.287-18.661-21.827-14.308-34.158-23.215-55.346-37.177-24.485-16.135-8.612-25,5.342-39.5,3.652-3.793,67.107-61.51,68.335-66.746.153-.655.3-3.1-1.154-4.384s-3.59-.849-5.135-.5q-3.283.746-104.608,69.142-14.845,10.194-26.894,9.934c-8.855-.191-25.888-5.006-38.551-9.123-15.531-5.048-27.875-7.717-26.8-16.291q.84-6.7,18.45-13.7,108.446-47.248,144.628-62.3c68.872-28.647,83.183-33.623,92.511-33.789,2.052-.034,6.639.474,9.61,2.885a10.452,10.452,0,0,1,3.53,6.716A43.765,43.765,0,0,1,362.952,176.66Z"/>
                        </svg>
                    </button>
                </div>
            }
        </div>
        <div class="text-gray-700">
            @LotteryInfo.StartDateTime.ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
        </div>
    </div>
    <div class="bg-[@ColorStrings.C0] rounded-xl p-2">
        <div class="flex flex-wrap items-center justify-between gap-2">
            <div>
                <div class="font-bold text-lg inline">
                    @UiStringsLoc[UiStrings.LotteryResult]
                </div>
                <div class="inline">
                    <LotteryStatus LotteryInfo="@LotteryInfo" IsResult="@true"/>
                </div>
            </div>
            @if (_userHasEditRights)
            {
                <div class="p-1 rounded-full bg-white">
                    @if (_isSendingResult)
                    {
                        <ElementLoader/>
                    }
                    <button class="text-[#24a1de] block
                                @(!IsLotterySent || IsResultSent ? "opacity-50" : "hover:text-[#2193cc]")"
                            title="@(!IsLotterySent ? UiStringsLoc[UiStrings.LotteryIsNotSent] : IsResultSent ? UiStringsLoc[UiStrings.LotteryResultIsSent] : UiStringsLoc[UiStrings.SendNow])"
                            disabled="@(!IsLotterySent || IsResultSent)"
                            type="button"
                            @onclick="@SendResultAsync">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 496 512"
                             class="w-6 h-6">
                            <!--! Font Awesome Pro 6.4.0 by @@fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                            <path d="M248,8C111.033,8,0,119.033,0,256S111.033,504,248,504,496,392.967,496,256,384.967,8,248,8ZM362.952,176.66c-3.732,39.215-19.881,134.378-28.1,178.3-3.476,18.584-10.322,24.816-16.948,25.425-14.4,1.326-25.338-9.517-39.287-18.661-21.827-14.308-34.158-23.215-55.346-37.177-24.485-16.135-8.612-25,5.342-39.5,3.652-3.793,67.107-61.51,68.335-66.746.153-.655.3-3.1-1.154-4.384s-3.59-.849-5.135-.5q-3.283.746-104.608,69.142-14.845,10.194-26.894,9.934c-8.855-.191-25.888-5.006-38.551-9.123-15.531-5.048-27.875-7.717-26.8-16.291q.84-6.7,18.45-13.7,108.446-47.248,144.628-62.3c68.872-28.647,83.183-33.623,92.511-33.789,2.052-.034,6.639.474,9.61,2.885a10.452,10.452,0,0,1,3.53,6.716A43.765,43.765,0,0,1,362.952,176.66Z"/>
                        </svg>
                    </button>
                </div>
            }
        </div>
        <div class="text-gray-700">
            @LotteryInfo.EndDateTime.ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
        </div>
    </div>
</div>

<div class="mt-3 flex flex-wrap gap-3">
    <div>
        <label class="font-bold">@UiStringsLoc[UiStrings.WinnersCount]: </label>
        @LotteryInfo.WinnersCount
    </div>
    <div>
        <label class="font-bold">@UiStringsLoc[UiStrings.ParticipantsCount]: </label>
        @LotteryInfo.Participants.Count
    </div>
</div>

<div class="flex gap-2 mt-3">
    <label class="font-bold">@UiStringsLoc[UiStrings.Creator]:</label>
    <UserTile User="@(LotteryInfo.Creator?.Administrator ?? new TgHubUser())"/>
</div>

@if (LotteryInfo.Attachments.Any())
{
    <label class="font-bold mt-3">@UiStringsLoc[UiStrings.Attachments]</label>
    <div class="rounded-xl max-h-[10rem] bg-[@ColorStrings.C0] py-1 pl-1 pr-2 flex flex-col">
        <div class="grow flex flex-wrap gap-2 overflow-y-auto py-2 pl-2 pr-1">
            @foreach (var attachment in _attachments)
            {
                <AttachmentTile Model="@attachment"/>
            }
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(LotteryInfo.Content))
{
    <label class="font-bold mt-3">@UiStringsLoc[UiStrings.Content]</label>
    <div class="rounded-xl max-h-[15rem] min-w-[7rem] bg-[@ColorStrings.C0] py-1 pl-1 pr-2 flex flex-col">
        <div class="grow flex flex-col gap-2 overflow-y-auto py-2 pl-2 pr-1 whitespace-pre-wrap">
            @((MarkupString)LotteryInfo.Content)
        </div>
    </div>
}

@if (IsResultSent)
{
    <label class="font-bold mt-3">@UiStringsLoc[UiStrings.Winners]</label>
    <div class="rounded-xl max-h-[15rem] min-w-[7rem] bg-[@ColorStrings.C0] py-1 pl-1 pr-2 flex flex-col">
        <div class="grow grid grid-cols-3 w-full justify-items-center gap-2 overflow-y-auto py-2 pl-2 pr-1">
            @foreach (var winner in LotteryInfo.Participants.Where(p => p.IsWinner))
            {
                <a href="@Constants.TgBaseUrl/@winner.NickName" target="_blank">
                    @@@winner.NickName
                </a>
            }
        </div>
    </div>
}

@code {

    [CascadingParameter]
    private BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public Lottery LotteryInfo { get; set; } = new();

    private bool _userHasEditRights;
    private bool _isSendingLottery;
    private bool _isSendingResult;
    private List<AttachmentTileModel> _attachments = new();

    protected override async Task OnInitializedAsync()
    {
        await using var scope = ServiceProvider.CreateAsyncScope();
        var lotteryService = scope.ServiceProvider.GetRequiredService<ILotteryService>();

        var isUserLotteryCreator = LotteryInfo.Creator.AdministratorId == LocalStorageProvider.Id;
        var isUserOwnerOfLotteryChannelEntity = await lotteryService
            .FirstOrDefaultAsync(l =>
                l.Id == LotteryInfo.Id &&
                l.Creator.Channel.Administrators.Any(a => a.IsActive &&
                                                          a.Role == ChannelRole.Owner &&
                                                          a.AdministratorId == LocalStorageProvider.Id));
        var isUserOwnerOfLotteryChannel = isUserOwnerOfLotteryChannelEntity != null;
        _userHasEditRights = isUserLotteryCreator || isUserOwnerOfLotteryChannel;
    }

    protected override void OnParametersSet()
    {
        var attachments = new List<AttachmentTileModel>();
        var directory = Uri.EscapeDataString($"{Constants.LotteryAttachmentsFolderName}/{LotteryInfo.AttachmentsFolderId}");
        foreach (var attachment in LotteryInfo.Attachments)
        {
            var url = $"/api/files?fileName={attachment.FileName}&directory={directory}&token={LocalStorageProvider.Token}";
            attachments.Add(Mapper.Map<AttachmentTileModel>(attachment, opt =>
                opt.Items[nameof(AttachmentTileModel.Url)] = url));
        }
        _attachments = attachments;
    }

    private async Task SendLotteryAsync()
    {
        if (_isSendingLottery || IsLotterySent)
        {
            return;
        }
        try
        {
            _isSendingLottery = true;
            await using var scope = ServiceProvider.CreateAsyncScope();

            var tgClient = scope.ServiceProvider.GetRequiredService<ITgHubTelegramBotClient>();
            var tgId = await tgClient.SendLotteryAsync(LotteryInfo);

            LotteryInfo.StartDateTime = DateTime.UtcNow;
            LotteryInfo.LotteryTelegramId = tgId;

            var lotteryService = scope.ServiceProvider.GetRequiredService<ILotteryService>();
            await lotteryService.UpdateAsync(LotteryInfo);

            var lotteryScheduleService = scope.ServiceProvider.GetRequiredService<ILotteryScheduleService>();
            await lotteryScheduleService.UnscheduleLotteryAsync(LotteryInfo);

            ToastService.ShowSuccess(string.Format(NotificationStringsLoc[NotificationStrings.LotterySent],
                LotteryInfo.Title, LotteryInfo.Creator.Channel.Name));
        }
        catch (Exception e)
        {
            ToastService.ShowError(NotificationStringsLoc[NotificationStrings.SendError]);
            Logger.LogError(e, "Error sending lottery {0} to Telegram", LotteryInfo.Id);
        }
        finally
        {
            _isSendingLottery = false;
            StateHasChanged();
        }
    }

    private async Task SendResultAsync()
    {
        if (_isSendingResult || !IsLotterySent || IsResultSent)
        {
            return;
        }
        try
        {
            _isSendingResult = true;
            await using var scope = ServiceProvider.CreateAsyncScope();

            var lotteryService = scope.ServiceProvider.GetRequiredService<ILotteryService>();
            await Task.Run(() => lotteryService.SelectWinners(LotteryInfo));

            var tgClient = scope.ServiceProvider.GetRequiredService<ITgHubTelegramBotClient>();
            var tgId = await tgClient.SendLotteryResultAsync(LotteryInfo);

            LotteryInfo.EndDateTime = DateTime.UtcNow;
            LotteryInfo.ResultTelegramId = tgId;
            await lotteryService.UpdateAsync(LotteryInfo);

            var lotteryScheduleService = scope.ServiceProvider.GetRequiredService<ILotteryScheduleService>();
            await lotteryScheduleService.UnscheduleResultAsync(LotteryInfo);

            ToastService.ShowSuccess(string.Format(NotificationStringsLoc[NotificationStrings.LotteryResultSent],
                LotteryInfo.Title, LotteryInfo.Creator.Channel.Name));
        }
        catch (Exception e)
        {
            ToastService.ShowError(NotificationStringsLoc[NotificationStrings.SendError]);
            Logger.LogError(e, "Error sending lottery {0} to Telegram", LotteryInfo.Id);
        }
        finally
        {
            _isSendingResult = false;
            StateHasChanged();
        }
    }

    private async Task DeleteAsync()
    {
        try
        {
            await using var scope = ServiceProvider.CreateAsyncScope();
            var lotteryService = scope.ServiceProvider.GetRequiredService<ILotteryService>();
            var lotteryScheduleService = scope.ServiceProvider.GetRequiredService<ILotteryScheduleService>();

            await lotteryService.DeleteAsync(LotteryInfo);
            await lotteryScheduleService.UnscheduleLotteryAsync(LotteryInfo);
            ToastService.ShowSuccess(string.Format(NotificationStringsLoc[NotificationStrings.LotteryDeleted],
                LotteryInfo.Title));
            await BlazoredModal.CloseAsync();
        }
        catch (Exception e)
        {
            ToastService.ShowError(NotificationStringsLoc[NotificationStrings.DeleteError]);
            Logger.LogError(e, "Error deleting lottery {0}", LotteryInfo.Id);
        }
    }

    private bool IsLotterySent => LotteryInfo.LotteryTelegramId != null;
    private bool IsResultSent => LotteryInfo.ResultTelegramId != null;

}