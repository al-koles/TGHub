@using TGHub.Application.Services.Lotteries.Interfaces
@using TGHub.Domain.Entities
@using TGHub.Application.Resources
@using TGHub.Application.Services.Lotteries.Data
@inject ILotteryScheduleService LotteryScheduleService
@inject IStringLocalizer<UiStrings> UiStringsLoc

<div class="text-@_color border-2 border-@_color px-1 py-0.5 inline-block uppercase text-xs font-bold"
     title="@_statusDescription">
    @_status
</div>

@code {

    [Parameter]
    public bool IsResult { get; set; }

    [Parameter]
    public Lottery? LotteryInfo { get; set; }

    [Parameter]
    public LotterySendStatus Status { get; set; }

    [Parameter]
    public EventCallback<LotterySendStatus> StatusChanged { get; set; }

    private string _status = null!;
    private string _statusDescription = null!;
    private string _color = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (LotteryInfo != null)
        {
            if (IsResult)
            {
                Status = await LotteryScheduleService.GetResultSendStatusAsync(LotteryInfo);
            }
            else
            {
                Status = await LotteryScheduleService.GetLotterySendStatusAsync(LotteryInfo);
            }
            switch (Status)
            {
                case LotterySendStatus.Sent:
                    _status = UiStringsLoc[UiStrings.StatusSent];
                    _statusDescription = UiStringsLoc[UiStrings.StatusSentDescription];
                    _color = "green-400";
                    break;
                case LotterySendStatus.FailedToSend:
                    _status = UiStringsLoc[UiStrings.StatusFailedToSend];
                    _statusDescription = UiStringsLoc[UiStrings.StatusFailedToSendDescription];
                    _color = "red-400";
                    break;
                case LotterySendStatus.Scheduled:
                    _status = UiStringsLoc[UiStrings.StatusScheduled];
                    _statusDescription = UiStringsLoc[UiStrings.StatusScheduledDescription];
                    _color = "indigo-400";
                    break;
                case LotterySendStatus.NotScheduled:
                    _status = UiStringsLoc[UiStrings.StatusNotScheduled];
                    _statusDescription = UiStringsLoc[UiStrings.StatusNotScheduledDescription];
                    _color = "yellow-400";
                    break;
            }
            await StatusChanged.InvokeAsync(Status);
        }
    }

}