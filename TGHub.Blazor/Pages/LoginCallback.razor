@page "/login-callback"
@using TGHub.WebApiCore.Options
@using Microsoft.Extensions.Options
@using TGHub.Application.Services.Auth
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Cryptography
@using System.Text
@using AutoMapper
@using TGHub.Application.Services.User
@using TGHub.Blazor.Shared.Loaders
@using TGHub.Domain.Entities

@inject IOptionsSnapshot<TelegramBotOptions> BotOptions
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject IMapper Mapper
@inject IToastService ToastService
@inject ILogger<LoginCallback> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<ElementLoader/>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string RedirectUrl { get; set; } = null!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Id { get; set; } = null!;

    [Parameter]
    [SupplyParameterFromQuery(Name = "first_name")]
    public string? FirstName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "last_name")]
    public string? LastName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? UserName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "photo_url")]
    public string? PhotoUrl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "auth_date")]
    public string? AuthDate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Hash { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (ValidateCallback())
            {
                var userSession = GetUserSession();
                try
                {
                    await UpdateUserDataAndLoginAsync(userSession);
                    NavigationManager.NavigateTo($"/{RedirectUrl}", true);
                    ToastService.ShowSuccess($"Welcome back {FirstName}!");
                }
                catch (Exception e)
                {
                    ToastService.ShowError("Login error. Please try again.");
                    NavigationManager.NavigateTo("/login", true);
                    Logger.LogError("Login error. {0}", e.Message);
                }
            }
            else
            {
                ToastService.ShowError("Invalid data. Please try again.");
                NavigationManager.NavigateTo("/login", true);
            }
        }
    }

    private bool ValidateCallback()
    {
        var queryString = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var query = QueryHelpers.ParseQuery(queryString);

        var dataCheckString = string.Join("\n",
            query.Where(p => p.Key != "hash" && p.Key != "redirectUrl")
                .Select(p => $"{p.Key}={p.Value}")
                .OrderBy(p => p));
        var secretKey = SHA256.HashData(Encoding.UTF8.GetBytes(BotOptions.Value.Token));
        var checkHash = BitConverter.ToString(HMACSHA256.HashData(secretKey, Encoding.UTF8.GetBytes(dataCheckString)))
            .Replace("-", "").ToLower();

        return checkHash == Hash;
    }

    private UserSession GetUserSession()
    {
        return new UserSession
        {
            TelegramId = Id,
            FirstName = FirstName,
            LastName = LastName,
            UserName = UserName,
            PhotoUrl = PhotoUrl,
            AuthDate = AuthDate
        };
    }

    private async Task UpdateUserDataAndLoginAsync(UserSession userSession)
    {
        await using var scope = ServiceProvider.CreateAsyncScope();
        var userService = scope.ServiceProvider.GetRequiredService<IUserService>();

        var user = await userService.FirsOrDefaultAsync(u => u.TelegramId == userSession.TelegramId);
        if (user == null)
        {
            var userId = await userService.CreateAsync(Mapper.Map<TgHubUser>(userSession));
            userSession.Id = userId;
        }
        else
        {
            Mapper.Map(userSession, user);
            await userService.UpdateAsync(user);
        }
        await ((CustomAuthStateProvider)AuthenticationStateProvider).LoginAsync(userSession);
    }

}