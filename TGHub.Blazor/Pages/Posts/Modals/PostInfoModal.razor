@using TGHub.Blazor.Extensions
@using TGHub.Blazor.Resources
@using TGHub.Domain.Entities
@using TGHub.Domain.Enums
@using TGHub.Application.Resources
@using TGHub.Application.Services.Posts
@using TGHub.Application.Common
@using TGHub.Application.Interfaces
@using System.Globalization
@using TGHub.Application
@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject IStringLocalizer<NotificationStrings> NotificationStringsLoc
@inject LocalStorageProvider LocalStorageProvider
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject ILogger<PostInfoModal> Logger

<div class="flex flex-wrap justify-content-between items-center">
    <div>
        <label class="font-bold mr-1">
            @UiStringsLoc[UiStrings.SendStatus]:
        </label>
        @{
            string sendStatusColorCssClass;
            string sendStatusText;
            switch (PostInfo.GetSendStatus())
            {
                case PostSendStatus.Pending:
                    sendStatusColorCssClass = "indigo-300";
                    sendStatusText = UiStringsLoc[UiStrings.Pending];
                    break;
                case PostSendStatus.Success:
                    sendStatusColorCssClass = "green-300";
                    sendStatusText = UiStringsLoc[UiStrings.Success];
                    break;
                default:
                    sendStatusColorCssClass = "red-300";
                    sendStatusText = UiStringsLoc[UiStrings.Error];
                    break;
            }
            <div class="text-@sendStatusColorCssClass border-2 border-@sendStatusColorCssClass px-1 py-0.5 inline-block uppercase text-xs font-bold">
                @sendStatusText
            </div>
        }
    </div>
    @if (CanEditOrSend)
    {
        <div class="flex flex-wrap gap-3 p-1 rounded-full bg-[@ColorStrings.C0] w-fit relative">
            @if (_isSending)
            {
                <ElementLoader/>
            }
            <div class="text-[#24a1de] hover:text-[#2193cc] hover:cursor-pointer"
                 title="@UiStringsLoc[UiStrings.SendNow]"
                 @onclick="@SendNowAsync">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 496 512"
                     class="w-8 h-8">
                    <!--! Font Awesome Pro 6.4.0 by @@fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                    <path d="M248,8C111.033,8,0,119.033,0,256S111.033,504,248,504,496,392.967,496,256,384.967,8,248,8ZM362.952,176.66c-3.732,39.215-19.881,134.378-28.1,178.3-3.476,18.584-10.322,24.816-16.948,25.425-14.4,1.326-25.338-9.517-39.287-18.661-21.827-14.308-34.158-23.215-55.346-37.177-24.485-16.135-8.612-25,5.342-39.5,3.652-3.793,67.107-61.51,68.335-66.746.153-.655.3-3.1-1.154-4.384s-3.59-.849-5.135-.5q-3.283.746-104.608,69.142-14.845,10.194-26.894,9.934c-8.855-.191-25.888-5.006-38.551-9.123-15.531-5.048-27.875-7.717-26.8-16.291q.84-6.7,18.45-13.7,108.446-47.248,144.628-62.3c68.872-28.647,83.183-33.623,92.511-33.789,2.052-.034,6.639.474,9.61,2.885a10.452,10.452,0,0,1,3.53,6.716A43.765,43.765,0,0,1,362.952,176.66Z"/>
                </svg>
            </div>
            <a class="text-[@ColorStrings.C2]/80 hover:text-[@ColorStrings.C2]"
               title="@UiStringsLoc[UiStrings.Edit]"
               href="/posts/edit/@PostInfo.Id?redirectUrl=@Uri.EscapeDataString(new Uri(NavigationManager.Uri).PathAndQuery)">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                     class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"/>
                </svg>
            </a>
            <div class="text-red-500 hover:text-red-600 hover:cursor-pointer"
                 title="@UiStringsLoc[UiStrings.Delete]"
                 @onclick="@DeleteAsync">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                     class="w-8 h-8">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"/>
                </svg>
            </div>
        </div>
    }
</div>

<div class="mt-3">
    <label class="font-bold">@UiStringsLoc[UiStrings.ReleaseAt]</label>
    @PostInfo.ReleaseDateTime.ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
</div>
<div class="flex gap-2 mt-3">
    <label class="font-bold">@UiStringsLoc[UiStrings.Creator]:</label>
    <UserTile User="@(PostInfo.Creator?.Administrator ?? new TgHubUser())"/>
</div>

@if (PostInfo.Attachments.Any())
{
    <label class="font-bold mt-3">@UiStringsLoc[UiStrings.Attachments]</label>
    <div class="rounded-xl max-h-[10rem] bg-[@ColorStrings.C0] py-1 pl-1 pr-2 flex flex-col">
        <div class="grow flex flex-wrap gap-2 overflow-y-auto py-2 pl-2 pr-1">
            @foreach (var attachment in PostInfo.Attachments)
            {
                var directory = Uri.EscapeDataString($"{Constants.PostAttachmentsFolderName}/{PostInfo.AttachmentsFolderId}");
                var url = $"/api/files?fileName={attachment.FileName}&directory={directory}&token={LocalStorageProvider.Token}";
                <div class="w-[7rem] h-[7rem] flex flex-col overflow-y-auto items-center gap-1 relative rounded-md bg-white p-1">
                    <div class="h-[4rem]">
                        @if (attachment.Type == AttachmentType.Photo)
                        {
                            <img src="@url" alt="@Path.GetExtension(attachment.FileName)"
                                 class="max-h-full"/>
                        }
                        else if (attachment.Type == AttachmentType.Video)
                        {
                            <video controls
                                   class="max-h-full">
                                <source src="@url" type="video/mp4"/>
                            </video>
                        }
                        else if (attachment.Type == AttachmentType.Audio)
                        {
                            <audio controls
                                   class="max-h-full">
                                <source src="@url"/>
                            </audio>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                                 class="w-12 h-12">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z"/>
                            </svg>
                        }
                    </div>
                    <div class="text-xs break-words w-full">
                        @attachment.FileName
                    </div>
                    <a class="block absolute top-0 right-0 hover:cursor-pointer rounded-full p-0.5 bg-[@ColorStrings.C0]/60"
                       href="@url" target="_blank">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3"/>
                        </svg>
                    </a>
                </div>
            }
        </div>
    </div>
}

@if (PostInfo.Buttons.Any())
{
    <label class="font-bold mt-3">@UiStringsLoc[UiStrings.Buttons]</label>
    <div class="rounded-xl max-h-[10rem] max-w-[10rem] bg-[@ColorStrings.C0] py-1 pl-1 pr-2 flex flex-col">
        <div class="grow flex flex-col gap-2 overflow-y-auto py-2 pl-2 pr-1">
            @foreach (var button in PostInfo.Buttons)
            {
                <a class="bg-white rounded-full p-1 text-center"
                   href="@button.Link"
                   title="@button.Link"
                   target="_blank">
                    @button.Content
                </a>
            }
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(PostInfo.Content))
{
    <label class="font-bold mt-3">@UiStringsLoc[UiStrings.Content]</label>
    <div class="rounded-xl max-h-[15rem] min-w-[7rem] bg-[@ColorStrings.C0] py-1 pl-1 pr-2 flex flex-col">
        <div class="grow flex flex-col gap-2 overflow-y-auto py-2 pl-2 pr-1">
            @((MarkupString)PostInfo.Content)
        </div>
    </div>
}

@code {

    [CascadingParameter]
    private BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public Post PostInfo { get; set; } = new();

    private bool _userHasEditRights;
    private bool _isSending;

    protected override async Task OnInitializedAsync()
    {
        await using var scope = ServiceProvider.CreateAsyncScope();
        var postService = scope.ServiceProvider.GetRequiredService<IPostService>();

        var isUserPostCreator = PostInfo.Creator.AdministratorId == LocalStorageProvider.Id;
        var isUserOwnerOfPostChannelEntity = await postService
            .FirstOrDefaultAsync(p =>
                p.Id == PostInfo.Id &&
                p.Creator.Channel.Administrators.Any(a => a.IsActive &&
                                                          a.Role == ChannelRole.Owner &&
                                                          a.AdministratorId == LocalStorageProvider.Id));
        var isUserOwnerOfPostChannel = isUserOwnerOfPostChannelEntity != null;
        _userHasEditRights = isUserPostCreator || isUserOwnerOfPostChannel;
    }

    private async Task SendNowAsync()
    {
        if (_isSending)
        {
            return;
        }
        try
        {
            _isSending = true;
            await using var scope = ServiceProvider.CreateAsyncScope();

            var tgClient = scope.ServiceProvider.GetRequiredService<ITgHubTelegramBotClient>();
            var tgId = await tgClient.SendPostAsync(PostInfo);

            var postService = scope.ServiceProvider.GetRequiredService<IPostService>();
            PostInfo.ReleaseDateTime = DateTime.UtcNow;
            PostInfo.TelegramId = tgId;
            await postService.UpdateAsync(PostInfo);
            await postService.UnscheduleAsync(PostInfo);
            ToastService.ShowSuccess(string.Format(NotificationStringsLoc[NotificationStrings.PostSent],
                PostInfo.Title, PostInfo.Creator.Channel.Name));
        }
        catch (Exception e)
        {
            ToastService.ShowError(NotificationStringsLoc[NotificationStrings.SendError]);
            Logger.LogError(e, "Error sending post {0} to Telegram", PostInfo.Id);
        }
        finally
        {
            _isSending = false;
            StateHasChanged();
        }
    }

    private async Task DeleteAsync()
    {
        try
        {
            await using var scope = ServiceProvider.CreateAsyncScope();
            var postService = scope.ServiceProvider.GetRequiredService<IPostService>();

            await postService.DeleteAsync(PostInfo);
            await postService.UnscheduleAsync(PostInfo);
            ToastService.ShowSuccess(string.Format(NotificationStringsLoc[NotificationStrings.PostDeleted],
                PostInfo.Title));
            await BlazoredModal.CloseAsync();
        }
        catch (Exception e)
        {
            ToastService.ShowError(NotificationStringsLoc[NotificationStrings.DeleteError]);
            Logger.LogError(e, "Error deleting post {0}", PostInfo.Id);
        }
    }

    private bool IsPostSent => PostInfo.TelegramId != null;

    private bool CanEditOrSend => !IsPostSent && _userHasEditRights;

}