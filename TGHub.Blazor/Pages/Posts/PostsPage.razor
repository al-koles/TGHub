@attribute [Authorize]
@page "/posts"
@using TGHub.Domain.Entities
@using TGHub.Domain.Enums
@using TGHub.Application.Services.Base
@using TGHub.Blazor.Shared.Buttons
@using TGHub.Blazor.Shared.Components
@using TGHub.Blazor.Shared.Components.Calendar.Models
@using TGHub.Blazor.Shared.Components.Calendar
@using AutoMapper
@using System.Globalization
@using TGHub.Application.Common.Filtering

@inject IService<Post> PostService
@inject IMapper Mapper
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="h-full flex flex-col">
    <div class="w-full flex items-center justify-between my-2">
        <PageHeaderTitle Text="Posts"/>
        <ActiveButton Text="Create"/>
    </div>
    <div class="grow w-full">
        <Calendar Events="@_events" Year="@_year" Month="@_month"/>
    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Year { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Month { get; set; }

    private int _year = DateTime.UtcNow.Year;
    private Month _month = (Month)DateTime.UtcNow.Month;

    private List<CalendarEventModel> _events = new();

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!TryGetParameters(out var year, out var month))
        {
            var now = DateTime.UtcNow;
            NavigationManager.NavigateTo($"/posts?year={now.Year}&month={now.Month}");
            return;
        }

        _year = year;
        _month = month;

        _events = await GetEventsAsync();
    }

    private bool TryGetParameters(out int year, out Month month)
    {
        year = DateTime.MinValue.Year;
        month = Domain.Enums.Month.January;
        if (int.TryParse(Year, out year) && int.TryParse(Month, out var monthInt))
        {
            month = (Month)monthInt;
            return year >= DateTime.MinValue.Year && year <= DateTime.MaxValue.Year &&
                   monthInt is >= 1 and <= 12;
        }
        return false;
    }

    private async Task<List<CalendarEventModel>> GetEventsAsync()
    {
        var firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        var lastDayOfWeek = firstDayOfWeek + 6;

        var from = new DateTime(_year, (int)_month, 1);
        var daysToFirstDayOfWeek = (from.DayOfWeek - firstDayOfWeek + 7) % 7;
        from = from.AddDays(-1 * daysToFirstDayOfWeek);

        var to = new DateTime(_year, (int)_month, 1).AddMonths(1).AddDays(-1);
        var daysToWeekEndCount = ((int)lastDayOfWeek - (int)to.DayOfWeek + 7) % 7;
        to = to.AddDays(daysToWeekEndCount);

        var posts = await PostService.ListAsync(new FilterBase<Post>
        {
            Where = p => p.ReleaseDateTime >= from && p.ReleaseDateTime <= to
        });
        return Mapper.Map<List<CalendarEventModel>>(posts);
    }

}