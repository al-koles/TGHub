@using TGHub.Blazor.Data
@using TGHub.Blazor.Pages.Posts.Models
@using TGHub.Blazor.Resources
@using TGHub.Domain.Entities
@using AutoMapper
@using TGHub.Application.Services.Posts
@using TGHub.Application.Resources
@using Quartz
@using TGHub.Application
@using TGHub.Application.Common.Jobs
@using TGHub.Application.Interfaces
@inject IMapper Mapper
@inject IPostService PostService
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject IStringLocalizer<NotificationStrings> NotificationStringsLoc
@inject ILogger<PostForm> Logger
@inject ISchedulerFactory SchedulerFactory
@inject IFileStorage FileStorage

<div class="rounded-3xl w-full h-full px-8 py-4 bg-[@ColorStrings.C1]/40">
    <EditForm Model="@Model" OnValidSubmit="@OnValidSubmit">
        <ObjectGraphDataAnnotationsValidator/>
        <div class="flex flex-col gap-3">
            <div class="flex justify-between items-center">
                <PageHeaderTitle Text="@UiStringsLoc[nameof(UiStrings.CreatePost)]"/>
                <SubmitButton IsLoading="@_isLoading"/>
            </div>

            <div class="flex flex-col">
                <label class="font-bold">@UiStringsLoc[nameof(UiStrings.Channel)]</label>
                <div class="flex">
                    <ChannelSelector @bind-Channel="@Model.Creator" SetFromGlobal="@(!IsEdit)"/>
                </div>
                <ValidationMessage For="@(() => Model.Creator)"/>
            </div>

            <div class="flex flex-col">
                <label class="font-bold">@UiStringsLoc[nameof(UiStrings.Title)]</label>
                <InputText class="@($"rounded-full w-full p-2 focus:outline-[{ColorStrings.C5}]")"
                           @bind-Value="@Model.Title"/>
                <ValidationMessage For="@(() => Model.Title)"/>
            </div>

            <div class="flex flex-col">
                <div class="flex gap-4">
                    <label class="font-bold">@UiStringsLoc[nameof(UiStrings.Attachments)]</label>
                    @if (!Model.Attachments.Any())
                    {
                        <label>
                            @UiStringsLoc[UiStrings.SelectFileFormat]:
                            <InputSelect TValue="@MediaGroupFormat" Value="@_attachmentsFormat" ValueExpression="@(() => _attachmentsFormat)"
                                         ValueChanged="@OnAttachmentsFormatChanged">
                                @foreach (var attachmentFormat in Enum.GetValues<MediaGroupFormat>())
                                {
                                    <option value="@attachmentFormat">@UiStringsLoc[attachmentFormat.ToString()]</option>
                                }
                            </InputSelect>
                        </label>
                    }
                </div>
                <CustomInputFiles Files="@Model.Attachments"
                                  FilesExpression="@(() => Model.Attachments)"
                                  FilesChanged="@OnAttachmentsChanged"
                                  AllowedFileFormats="@_attachmentsFormatsString"/>
                <ValidationMessage For="@(() => Model.Attachments)"/>
                <div class="text-red-500">@_attachmentsValidationMessage</div>
            </div>

            <div class="flex gap-4">
                <div class="flex flex-col">
                    <label class="font-bold">@UiStringsLoc[nameof(UiStrings.ReleaseDate)]</label>
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                             class="w-6 h-6 inline text-[@ColorStrings.C5]">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z"/>
                        </svg>
                        <InputDate class="@($"px-2 py-0.5 rounded-full focus:outline-[{ColorStrings.C5}]")"
                                   @bind-Value="@Model.ReleaseDate"/>
                    </div>
                    <ValidationMessage For="@(() => Model.ReleaseDate)"/>
                </div>
                <div class="flex flex-col">
                    <label class="font-bold">@UiStringsLoc[nameof(UiStrings.ReleaseTime)]</label>
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                             class="w-6 h-6 inline text-[@ColorStrings.C5]">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        <InputText type="time" class="@($"px-2 py-0.5 rounded-full focus:outline-[{ColorStrings.C5}]")"
                                   @bind-Value="@Model.ReleaseTime"/>
                    </div>
                    <ValidationMessage For="@(() => Model.ReleaseTime)"/>
                </div>
            </div>

            <div class="flex flex-col">
                <label class="font-bold">@UiStringsLoc[nameof(UiStrings.Content)]</label>
                <InputTextArea class="@($"min-h-[5rem] rounded-2xl w-full p-2 focus:outline-[{ColorStrings.C5}]")"
                               @bind-Value="@Model.Content"/>
                <ValidationMessage For="@(() => Model.Content)"/>
            </div>
        </div>
    </EditForm>
</div>

@code {

    [Parameter]
    public PostModel Model { get; set; } = new();

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public string RedirectUrl { get; set; } = null!;

    private bool _isLoading;
    private string _attachmentsFormatsString = string.Empty;
    private string _attachmentsValidationMessage = string.Empty;
    private List<IBrowserFile> _invalidExtensionFiles = new();
    private MediaGroupFormat _attachmentsFormat = MediaGroupFormat.PhotoVideo;

    protected override void OnParametersSet()
    {
        if (Model.Attachments.Any())
        {
            _attachmentsFormat = AttachmentFormatsHelper
                .GetMediaGroupFormat(Path.GetExtension(Model.Attachments.First().Name));
        }
        _attachmentsFormatsString = _attachmentsFormat.GetFileFormats();
    }

    private async Task OnValidSubmit()
    {
        if (_isLoading)
        {
            return;
        }
        if (!ValidateAttachments())
        {
            return;
        }
        _isLoading = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            var post = Mapper.Map<Post>(Model);

            if (IsEdit)
            {
                await PostService.UpdateAsync(post);
            }
            else
            {
                var id = await PostService.CreateAsync(post);
                post.Id = id;
            }
            await UploadFilesAsync(post.Id);
            await ConfigureTriggerAsync(post);
            NavigationManager.NavigateTo(RedirectUrl ?? "/");
        }
        catch (Exception e)
        {
            ToastService.ShowError(NotificationStringsLoc[nameof(NotificationStrings.SubmitError)]);
            Logger.LogError(e, "Submit failed");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void OnAttachmentsFormatChanged(MediaGroupFormat attachmentsFormat)
    {
        _attachmentsFormat = attachmentsFormat;
        _attachmentsFormatsString = attachmentsFormat.GetFileFormats();
    }

    private void OnAttachmentsChanged(List<IBrowserFile> attachments)
    {
        Model.Attachments = attachments;
        ValidateAttachments();
    }

    private async Task ConfigureTriggerAsync(Post post)
    {
        var scheduler = await SchedulerFactory.GetScheduler();
        var triggerKey = new TriggerKey(post.Id.ToString(), "posts");
        var newTrigger = TriggerBuilder.Create()
            .WithIdentity(triggerKey)
            .ForJob(SendPostJob.Key)
            .StartAt(post.ReleaseDateTime)
            .UsingJobData(new JobDataMap
            { { nameof(SendPostJob.PostId), post.Id } })
            .Build();

        var trigger = await scheduler.GetTrigger(triggerKey);
        if (trigger == null)
        {
            await scheduler.ScheduleJob(newTrigger);
        }
        else
        {
            await scheduler.RescheduleJob(triggerKey, newTrigger);
        }
    }

    private bool ValidateAttachments()
    {
        _invalidExtensionFiles = Model.Attachments.GetInvalidExtensionFiles(_attachmentsFormat);
        if (_invalidExtensionFiles.Any())
        {
            _attachmentsValidationMessage = string.Format(UiStringsLoc[UiStrings.InvalidExtensionFiles],
                string.Join(", ", _invalidExtensionFiles.Select(f => f.Name)));
            StateHasChanged();
            return false;
        }
        _invalidExtensionFiles.Clear();
        _attachmentsValidationMessage = string.Empty;
        StateHasChanged();
        return true;
    }

    private async Task UploadFilesAsync(int postId)
    {
        var directory = Path.Combine(Constants.PostAttachmentsFolderName, postId.ToString());
        foreach (var file in Model.Attachments)
        {
            await UploadFileAsync(file, directory);
        }
    }

    private async Task UploadFileAsync(IBrowserFile file, string directory)
    {
        await using var stream = file.OpenReadStream();
        await FileStorage.UploadAsync(stream, file.Name, directory);
    }

}