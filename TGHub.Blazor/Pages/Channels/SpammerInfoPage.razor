@attribute [Authorize]
@page "/spammers/{id:int}"
@using TGHub.Application.Resources
@using TGHub.Application.Services.ArchiveBanns
@using TGHub.Application.Services.Spammers
@using TGHub.Application.Services.SpamMessages
@using TGHub.Blazor.Pages.Channels.Data
@using TGHub.Blazor.Resources
@using TGHub.Domain.Entities
@using TGHub.Application
@using TGHub.Application.Common.Filtering
@using System.Globalization
@using TGHub.Blazor.Pages.Channels.Components
@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject IStringLocalizer<NotificationStrings> NotificationStringsLoc
@inject IServiceProvider ServiceProvider
@inject IToastService ToastService
@inject ILocalDateTimeManager LocalDateTimeManager
@inject NavigationManager NavigationManager

<div class="min-h-full w-full flex flex-col">
    <PageTitle>@UiStringsLoc[UiStrings.Spammer]</PageTitle>
    <PageHeaderTitle Text="@UiStringsLoc[UiStrings.Spammer]"/>
    <div class="grow w-full grid gap-2 justify-center mt-3" style="grid-template-columns: repeat(auto-fill, minmax(30rem, 1fr));">
        <div class="rounded-xl bg-[#ffffff]/70 p-4">
            <label class="font-bold">TelegramId:</label>
            @_spammer.TelegramId
            @{
                var colorClass = _status == SpammerStatus.Active ? "green-500" : "red-500";
                var statusText = _status == SpammerStatus.Active ? UiStringsLoc[UiStrings.Active] : UiStringsLoc[UiStrings.Banned];
            }
            <span class="float-right flex flex-wrap items-center gap-1">
                <span class="border-2 border-@colorClass text-@colorClass px-1 py-0.5 uppercase font-bold text-sm">
                    @statusText
                </span>
                @if (_status == SpammerStatus.Active)
                {
                    <button class="rounded px-2 py-1 bg-red-700/80 hover:bg-red-700 text-[#ffffff]"
                            @onclick="@OpenBannModalAsync">
                        @UiStringsLoc[UiStrings.Bann]
                    </button>
                }
                else
                {
                    <button class="rounded px-2 py-1 bg-[@ColorStrings.C5]/80 hover:bg-[@ColorStrings.C5] text-[#ffffff]"
                            @onclick="@OpenUnBannModalAsync">
                        @UiStringsLoc[UiStrings.Unban]
                    </button>
                }
            </span>
            @if (!string.IsNullOrEmpty(_spammer.FirstName))
            {
                <div class="mt-3">
                    <label class="font-bold">@UiStringsLoc[UiStrings.Name]:</label>
                    @_spammer.FirstName @_spammer.LastName
                </div>
            }
            @if (!string.IsNullOrEmpty(_spammer.UserName))
            {
                <div class="mt-3">
                    <label class="font-bold">@UiStringsLoc[UiStrings.Username]:</label>
                    <a href="@(Constants.TgBaseUrl)/@_spammer.UserName" target="_blank">
                        @@@_spammer.UserName
                    </a>
                </div>
            }
        </div>
        @if (_status == SpammerStatus.Banned)
        {
            <div class="rounded-xl bg-[#ffffff]/70 p-4">
                <div>
                    <label class="font-bold">@UiStringsLoc[UiStrings.BannedAt]:</label>
                    @_spammer.BannDateTime?.ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
                </div>
                @if (_spammer.BannInitiator != null)
                {
                    <div class="mt-3">
                        <label class="font-bold">@UiStringsLoc[UiStrings.BannInitiator]</label>
                        <div class="inline ml-1">
                            <UserTile User="@(_spammer.BannInitiator.Administrator ?? new TgHubUser())"/>
                        </div>
                    </div>
                    if (!string.IsNullOrEmpty(_spammer.BannContext))
                    {
                        <div class="mt-3">
                            <label class="font-bold">@UiStringsLoc[UiStrings.BannContext]</label>
                            <div class="whitespace-pre-wrap">
                                @((MarkupString)_spammer.BannContext)
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="mt-3 rounded-lg p-2 max-h-[10rem] overflow-y-auto bg-[@ColorStrings.C0]">
                        <div class="font-bold">@UiStringsLoc[UiStrings.AutoBannContext]</div>
                        <div class="whitespace-pre-wrap">
                            @((MarkupString)_spammer.BannContext!)
                        </div>
                    </div>
                }
            </div>
        }
        @if (_archiveBanns.Any())
        {
            <div class="rounded-xl bg-[#ffffff]/70 p-4">
                <label class="font-bold">@UiStringsLoc[UiStrings.BannHistory]</label>
                <div class="max-h-[20rem] overflow-y-auto p-1 bg-[@ColorStrings.C0] rounded-xl">
                    @foreach (var bann in _archiveBanns)
                    {
                        <div class="bg-[#ffffff] rounded-xl p-2 hover:-translate-y-0.5 hover:drop-shadow-md hover:bg-gray-100 cursor-pointer"
                             @onclick="@(() => OpenArchiveBannModal(bann))">
                            <div>
                                <label class="font-bold">@UiStringsLoc[UiStrings.BannedAt]:</label>
                                @bann.From.ToString(CultureInfo.CurrentCulture.DateTimeFormat.SortableDateTimePattern)
                            </div>
                            <div>
                                <label class="font-bold">@UiStringsLoc[UiStrings.UnbannedAt]:</label>
                                @bann.To.ToString(CultureInfo.CurrentCulture.DateTimeFormat.SortableDateTimePattern)
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @if (_spamMessages.Any())
        {
            <div class="rounded-xl bg-[#ffffff]/70 p-4">
                <label class="font-bold">@UiStringsLoc[UiStrings.LastSpamMessages]</label>
                <div class="max-h-[20rem] overflow-y-auto p-1 bg-[@ColorStrings.C0] rounded-xl flex flex-col gap-0.5">
                    @foreach (var spamMessage in _spamMessages)
                    {
                        <div class="bg-[#ffffff] rounded-xl p-2 hover:-translate-y-0.5 hover:drop-shadow-md hover:bg-gray-100 cursor-pointer"
                             @onclick="@(() => OpenSpamMessageModal(spamMessage))">
                            <div>
                                <label class="font-bold">@UiStringsLoc[UiStrings.Time]:</label>
                                @spamMessage.DateTimeWritten.ToString(CultureInfo.CurrentCulture.DateTimeFormat.SortableDateTimePattern)
                            </div>
                            <div class="text-sm line-clamp-2 text-gray-700 overflow-x-hidden whitespace-pre-wrap">
                                @((MarkupString)spamMessage.Value)
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {

    [CascadingParameter]
    private IModalService ModalService { get; set; } = null!;

    [Parameter]
    public int Id { get; set; }

    private Spammer _spammer = new();
    private List<SpamMessage> _spamMessages = new();
    private List<ArchiveBann> _archiveBanns = new();
    private SpammerStatus _status;

    protected override async Task OnInitializedAsync()
    {
        await LocalDateTimeManager.SetFromJsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        await using var scope = ServiceProvider.CreateAsyncScope();

        var spammerService = scope.ServiceProvider.GetRequiredService<ISpammerService>();
        var spammer = await spammerService.FirstOrDefaultAsync(s => s.Id == Id);
        if (spammer == null)
        {
            ToastService.ShowWarning(NotificationStringsLoc[NotificationStrings.MissingSpammer]);
            NavigationManager.NavigateTo("/channels");
            return;
        }
        _spammer = spammer;
        if (_spammer.BannDateTime.HasValue)
        {
            _spammer.BannDateTime = LocalDateTimeManager.Convert(_spammer.BannDateTime.Value, To.Local);
        }

        var spamMessageService = scope.ServiceProvider.GetRequiredService<ISpamMessageService>();
        _spamMessages = await spamMessageService.ListAsync(new FilterBase<SpamMessage>
        {
            Where = m => m.SpammerId == _spammer.Id,
            SortBy = m => m.DateTimeWritten,
            SortDirection = SortDirection.Descending
        });
        foreach (var spamMessage in _spamMessages)
        {
            spamMessage.DateTimeWritten = LocalDateTimeManager.Convert(spamMessage.DateTimeWritten, To.Local);
        }

        var archiveBannService = scope.ServiceProvider.GetRequiredService<IArchiveBannService>();
        _archiveBanns = await archiveBannService.ListAsync(new FilterBase<ArchiveBann>
        {
            Where = b => b.SpammerId == _spammer.Id,
            SortBy = b => b.From,
            SortDirection = SortDirection.Descending
        });
        foreach (var archiveBann in _archiveBanns)
        {
            archiveBann.From = LocalDateTimeManager.Convert(archiveBann.From, To.Local);
            archiveBann.To = LocalDateTimeManager.Convert(archiveBann.To, To.Local);
        }

        _status = _spammer.BannDateTime == null ? SpammerStatus.Active : SpammerStatus.Banned;
        StateHasChanged();
    }

    private void OpenArchiveBannModal(ArchiveBann bann)
    {
        ModalService.Show<ArchiveBannModal>(UiStringsLoc[UiStrings.ArchiveBann],
            new ModalParameters
            {
                { nameof(ArchiveBannModal.ArchiveBann), bann }
            });
    }

    private void OpenSpamMessageModal(SpamMessage spamMessage)
    {
        ModalService.Show<SpamMessageModal>(UiStringsLoc[UiStrings.SpamMessage],
            new ModalParameters
            {
                { nameof(SpamMessageModal.SpamMessage), spamMessage }
            });
    }

    private async Task OpenUnBannModalAsync()
    {
        var question = string.Format(UiStringsLoc[UiStrings.EnshureUnbann], _spammer.TelegramId);
        var modal = ModalService.Show<UnBannModal>(question, new ModalParameters
        {
            { nameof(UnBannModal.Spammer), _spammer }
        });
        var result = await modal.Result;
        if (result.Confirmed)
        {
            await RefreshAsync();
        }
    }

    private async Task OpenBannModalAsync()
    {
        var question = string.Format(UiStringsLoc[UiStrings.EnshureBann], _spammer.TelegramId);
        var modal = ModalService.Show<BannModal>(question, new ModalParameters
        {
            { nameof(BannModal.Spammer), _spammer }
        });
        var result = await modal.Result;
        if (result.Confirmed)
        {
            await RefreshAsync();
        }
    }

}