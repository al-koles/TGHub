@using TGHub.Application.Resources
@using TGHub.Application.Services.Channels
@using TGHub.Blazor.Resources
@using TGHub.Domain.Entities
@using TGHub.Domain.Enums
@using AutoMapper
@using TGHub.Application.Interfaces
@using TGHub.Application.Common.Exceptions
@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject IStringLocalizer<NotificationStrings> NotificationStringsLoc
@inject IToastService ToastService
@inject ILogger<ChannelModal> Logger
@inject IServiceProvider ServiceProvider
@inject IMapper Mapper

<div>
    <div class="flex justify-between gap-3">
        <label class="font-bold">@UiStringsLoc[UiStrings.Administrators]</label>
        <button type="button"
                class="text-[@ColorStrings.C5]/80 hover:text-[@ColorStrings.C5]
                        @(_isRefreshing ? "animate-spin" : "")"
                title="@UiStringsLoc[UiStrings.RefreshFromTg]"
                disabled="@_isRefreshing"
                @onclick="@RefreshAsync">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"/>
            </svg>
        </button>
    </div>
    <div class="flex flex-wrap gap-2 p-2">
        @foreach (var administrator in Channel.Administrators.Where(a => a.IsActive))
        {
            <UserTile User="@administrator.Administrator"
                      IsCrowned="@(administrator.Role == ChannelRole.Owner)" CrownTitle="@UiStringsLoc[UiStrings.Owner]"/>
        }
    </div>
</div>

<div class="mt-3 flex gap-2">
    <label class="font-bold">@UiStringsLoc[UiStrings.Spam]</label>
    <SimpleSwitcher Checked="@Channel.SpamOn" Click="@ShowSpamSwitchModal"/>
</div>

@code {

    [CascadingParameter]
    private IModalService ModalService { get; set; } = null!;

    [CascadingParameter]
    private BlazoredModalInstance Modal { get; set; } = null!;

    [Parameter]
    public Channel Channel { get; set; } = new();

    [Parameter]
    public EventCallback ChannelRefreshed { get; set; }

    private bool _isRefreshing;

    private async Task RefreshAsync()
    {
        if (_isRefreshing)
        {
            return;
        }
        _isRefreshing = true;
        StateHasChanged();
        try
        {
            await using var scope = ServiceProvider.CreateAsyncScope();

            var tgBotClient = scope.ServiceProvider.GetRequiredService<ITgHubTelegramBotClient>();
            await tgBotClient.CreateOrUpdateChannelFromTg(Channel.TelegramId);

            var channelService = scope.ServiceProvider.GetRequiredService<IChannelService>();
            var channel = await channelService.FirstOrDefaultAsync(ch => ch.Id == Channel.Id);
            Mapper.Map(channel, Channel);
            Modal.SetTitle(Channel.Name);
            await ChannelRefreshed.InvokeAsync();

            ToastService.ShowSuccess(string.Format(NotificationStringsLoc[NotificationStrings.ChannelRefreshSuccess], Channel.Name));
        }
        catch (NotFoundException e)
        {
            ToastService.ShowError(string.Format(NotificationStringsLoc[NotificationStrings.MissingChannel], Channel.Name));
            Logger.LogError(e, "Error while trying to refresh channel {0}", Channel.Id);
        }
        catch (Exception e)
        {
            ToastService.ShowError(string.Format(NotificationStringsLoc[NotificationStrings.ChannelRefreshError], Channel.Name));
            Logger.LogError(e, "Error while trying to refresh channel {0}", Channel.Id);
        }
        finally
        {
            _isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task ShowSpamSwitchModal()
    {
        var question = Channel.SpamOn ? UiStringsLoc[UiStrings.EnsureSpamOff] : UiStringsLoc[UiStrings.EnsureSpamOn];
        var modal = ModalService.Show<YesCancelModal>(string.Format(question, Channel.Name));
        var result = await modal.Result;
        if (result.Confirmed)
        {
            try
            {
                await using var scope = ServiceProvider.CreateAsyncScope();
                var channelService = scope.ServiceProvider.GetRequiredService<IChannelService>();
                var channel = await channelService.FirstOrDefaultAsync(ch => ch.Id == Channel.Id);
                channel!.SpamOn = !channel.SpamOn;
                await channelService.UpdateAsync(channel);
                Channel.SpamOn = channel.SpamOn;
            }
            catch (NotFoundException e)
            {
                ToastService.ShowError(string.Format(NotificationStringsLoc[NotificationStrings.MissingChannel], Channel.Name));
                Logger.LogError(e, "Error while trying to set channel {0} SpamOn", Channel.Id);
            }
            catch (Exception e)
            {
                ToastService.ShowError(string.Format(NotificationStringsLoc[NotificationStrings.SubmitError], Channel.Name));
                Logger.LogError(e, "Error while trying to set channel {0} SpamOn", Channel.Id);
            }
        }
    }

}