@using TGHub.Application.Resources
@using TGHub.Application.Services.Channels
@using TGHub.Blazor.Resources
@using TGHub.Domain.Entities
@using System.Globalization
@using TGHub.Application.Interfaces
@inject IStringLocalizer<UiStrings> UiStringsLoc
@inject IStringLocalizer<NotificationStrings> NotificationStringsLoc
@inject IToastService ToastService
@inject IServiceProvider ServiceProvider
@inject ILogger<BannedUserModal> Logger

<div>
    <label class="font-bold">@UiStringsLoc[UiStrings.BannedAt]:</label>
    @BannedUser.BannDate.ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
    <button type="button" class="relative inline float-right rounded px-2 py-1 bg-[@ColorStrings.C5]/80 hover:bg-[@ColorStrings.C5] text-[#ffffff]"
            @onclick="@UnBannAsync">
        @UiStringsLoc[UiStrings.Unban]
        @if (_isUnBanning)
        {
            <ElementLoader/>
        }
    </button>
</div>
@if (BannedUser.BannTo != null)
{
    <div>
        <label class="font-bold">@UiStringsLoc[UiStrings.BannedTo]:</label>
        @BannedUser.BannTo.Value.ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)
    </div>
}
<div class="mt-3">
    <label class="font-bold">@UiStringsLoc[UiStrings.BannContext]</label>
    <div>@((MarkupString)BannedUser.Context)</div>
</div>

@code {

    [CascadingParameter]
    private BlazoredModalInstance Modal { get; set; } = null!;

    [Parameter]
    public BannedUser BannedUser { get; set; } = new();

    private bool _isUnBanning;

    private async Task UnBannAsync()
    {
        if (BannedUser.Channel.LinkedChatTelegramId == null)
        {
            ToastService.ShowWarning(string.Format(NotificationStringsLoc[NotificationStrings.MissingCommentsGroup], BannedUser.Channel.Name));
            return;
        }
        if (_isUnBanning)
        {
            return;
        }
        _isUnBanning = true;
        StateHasChanged();
        try
        {
            await using var scope = ServiceProvider.CreateAsyncScope();

            var tgBotClient = scope.ServiceProvider.GetRequiredService<ITgHubTelegramBotClient>();
            await tgBotClient.UnBannUserAsync(BannedUser.TelegramId, BannedUser.Channel.LinkedChatTelegramId.Value);

            var channelService = scope.ServiceProvider.GetRequiredService<IChannelService>();
            var channel = await channelService.FirstOrDefaultAsync(ch => ch.Id == BannedUser.ChannelId);

            var userToUnBann = channel!.BannedUsers.FirstOrDefault(u => u.Id == BannedUser.Id);
            if (userToUnBann != null)
            {
                channel.BannedUsers.Remove(userToUnBann);
                await channelService.UpdateAsync(channel);
            }
            await Modal.CloseAsync();
        }
        catch (Exception e)
        {
            ToastService.ShowError(NotificationStringsLoc[NotificationStrings.UnBannError]);
            Logger.LogError(e, "Failed to unbann user {0}", BannedUser.Id);
        }
        finally
        {
            _isUnBanning = false;
            StateHasChanged();
        }
    }

}